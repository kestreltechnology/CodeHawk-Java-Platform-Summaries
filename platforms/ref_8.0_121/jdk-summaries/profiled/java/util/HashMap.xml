<?xml version="1.0" encoding="UTF-8"?>
<codehawk-java-analyzer>
  <header info="class" time="2019-01-18 23:22:42"/>
  <class name="HashMap" package="java.util">
    <superclass>java.util.AbstractMap</superclass>
    <interfaces>
      <implements>java.util.Map</implements>
      <implements>java.lang.Cloneable</implements>
      <implements>java.io.Serializable</implements>
    </interfaces>
    <!-- ============================ CONSTRUCTORS ============================  -->
    <constructors>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (int,float) -->
      <constructor access="public">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <float/>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </constructor>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (int) -->
      <constructor access="public">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </constructor>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ () -->
      <constructor access="public">
        <signature/>
        <exceptions/>
        <summary>
          <time-cost>
            <cost>
              <cn>480</cn>
            </cost>
          </time-cost>
        </summary>
      </constructor>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ (java.util.Map) -->
      <constructor access="public">
        <signature>
          <arg nr="1">
            <object>java.util.Map</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </constructor>
    </constructors>
    <!-- ============================== METHODS ==============================  -->
    <methods>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ afterNodeAccess -->
      <method access="default" name="afterNodeAccess">
        <signature>
          <arg nr="1">
            <object>java.util.HashMap$Node</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ afterNodeInsertion -->
      <method access="default" name="afterNodeInsertion">
        <signature>
          <arg nr="1">
            <boolean/>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ afterNodeRemoval -->
      <method access="default" name="afterNodeRemoval">
        <signature>
          <arg nr="1">
            <object>java.util.HashMap$Node</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ capacity -->
      <method access="default" final="yes" name="capacity">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ clear -->
      <method access="public" name="clear">
        <signature/>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ clone -->
      <method access="public" name="clone">
        <signature>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ comparableClassFor -->
      <method access="default" name="comparableClassFor" static="yes">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Class</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ compareComparables -->
      <method access="default" name="compareComparables" static="yes">
        <signature>
          <arg nr="1">
            <object>java.lang.Class</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ compute -->
      <method access="public" name="compute">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.util.function.BiFunction</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ computeIfAbsent -->
      <method access="public" name="computeIfAbsent">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.util.function.Function</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ computeIfPresent -->
      <method access="public" name="computeIfPresent">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.util.function.BiFunction</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ containsKey -->
      <method access="public" name="containsKey">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <time-cost>
            <cost>
              <cn>900</cn>
            </cost>
          </time-cost>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ containsValue -->
      <method access="public" name="containsValue">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ entrySet -->
      <method access="public" name="entrySet">
        <signature>
          <return>
            <object>java.util.Set</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ forEach -->
      <method access="public" name="forEach">
        <signature>
          <arg nr="1">
            <object>java.util.function.BiConsumer</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ get -->
      <method access="public" name="get">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <time-cost>
            <cost>
              <cn>900</cn>
            </cost>
          </time-cost>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getNode -->
      <method access="default" final="yes" name="getNode">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.util.HashMap$Node</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ getOrDefault -->
      <method access="public" name="getOrDefault">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ hash -->
      <method access="default" final="yes" name="hash" static="yes">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ internalWriteEntries -->
      <method access="default" name="internalWriteEntries">
        <signature>
          <arg nr="1">
            <object>java.io.ObjectOutputStream</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ isEmpty -->
      <method access="public" name="isEmpty">
        <signature>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ keySet -->
      <method access="public" name="keySet">
        <signature>
          <return>
            <object>java.util.Set</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <time-cost>
            <cost>
              <cn>190</cn>
            </cost>
          </time-cost>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ loadFactor -->
      <method access="default" final="yes" name="loadFactor">
        <signature>
          <return>
            <float/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ merge -->
      <method access="public" name="merge">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.util.function.BiFunction</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ newNode -->
      <method access="default" name="newNode">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="4">
            <object>java.util.HashMap$Node</object>
          </arg>
          <return>
            <object>java.util.HashMap$Node</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ newTreeNode -->
      <method access="default" name="newTreeNode">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="4">
            <object>java.util.HashMap$Node</object>
          </arg>
          <return>
            <object>java.util.HashMap$TreeNode</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ put -->
      <method access="public" name="put">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <time-cost>
            <cost>
              <apply>
                <plus/>
                <cn>700</cn>
                <apply>
                  <times/>
                  <apply>
                    <divide/>
                    <cn>3</cn>
                    <cn>10</cn>
                  </apply>
                  <apply>
                    <size/>
                    <arg nr="1"/>
                  </apply>
                </apply>
              </apply>
            </cost>
          </time-cost>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ putAll -->
      <method access="public" name="putAll">
        <signature>
          <arg nr="1">
            <object>java.util.Map</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ putIfAbsent -->
      <method access="public" name="putIfAbsent">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ putMapEntries -->
      <method access="default" final="yes" name="putMapEntries">
        <signature>
          <arg nr="1">
            <object>java.util.Map</object>
          </arg>
          <arg nr="2">
            <boolean/>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ putVal -->
      <method access="default" final="yes" name="putVal">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="4">
            <boolean/>
          </arg>
          <arg nr="5">
            <boolean/>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ readObject -->
      <method access="private" name="readObject">
        <signature>
          <arg nr="1">
            <object>java.io.ObjectInputStream</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ reinitialize -->
      <method access="default" name="reinitialize">
        <signature/>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ remove -->
      <method access="public" name="remove">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ remove -->
      <method access="public" name="remove">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ removeNode -->
      <method access="default" final="yes" name="removeNode">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="4">
            <boolean/>
          </arg>
          <arg nr="5">
            <boolean/>
          </arg>
          <return>
            <object>java.util.HashMap$Node</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replace -->
      <method access="public" name="replace">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="3">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <boolean/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replace -->
      <method access="public" name="replace">
        <signature>
          <arg nr="1">
            <object>java.lang.Object</object>
          </arg>
          <arg nr="2">
            <object>java.lang.Object</object>
          </arg>
          <return>
            <object>java.lang.Object</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replaceAll -->
      <method access="public" name="replaceAll">
        <signature>
          <arg nr="1">
            <object>java.util.function.BiFunction</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replacementNode -->
      <method access="default" name="replacementNode">
        <signature>
          <arg nr="1">
            <object>java.util.HashMap$Node</object>
          </arg>
          <arg nr="2">
            <object>java.util.HashMap$Node</object>
          </arg>
          <return>
            <object>java.util.HashMap$Node</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ replacementTreeNode -->
      <method access="default" name="replacementTreeNode">
        <signature>
          <arg nr="1">
            <object>java.util.HashMap$Node</object>
          </arg>
          <arg nr="2">
            <object>java.util.HashMap$Node</object>
          </arg>
          <return>
            <object>java.util.HashMap$TreeNode</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ resize -->
      <method access="default" final="yes" name="resize">
        <signature>
          <return>
            <array>
              <object>java.util.HashMap$Node</object>
            </array>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ size -->
      <method access="public" name="size">
        <signature>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary>
          <time-cost>
            <cost>
              <cn>40</cn>
            </cost>
          </time-cost>
        </summary>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ tableSizeFor -->
      <method access="default" final="yes" name="tableSizeFor" static="yes">
        <signature>
          <arg nr="1">
            <int/>
          </arg>
          <return>
            <int/>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ treeifyBin -->
      <method access="default" final="yes" name="treeifyBin">
        <signature>
          <arg nr="1">
            <array>
              <object>java.util.HashMap$Node</object>
            </array>
          </arg>
          <arg nr="2">
            <int/>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ values -->
      <method access="public" name="values">
        <signature>
          <return>
            <object>java.util.Collection</object>
          </return>
        </signature>
        <exceptions/>
        <summary/>
      </method>
      <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ writeObject -->
      <method access="private" name="writeObject">
        <signature>
          <arg nr="1">
            <object>java.io.ObjectOutputStream</object>
          </arg>
        </signature>
        <exceptions/>
        <summary/>
      </method>
    </methods>
  </class>
  <copyright-notice>Copyright 2012-2019, Kestrel Technology LLC, Palo Alto, CA 94304</copyright-notice>
</codehawk-java-analyzer>
